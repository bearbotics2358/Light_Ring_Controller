
i2c_neo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bb  00800068  00800068  0000065e  2**0
                  ALLOC
  3 .stab         00001b24  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bb6  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003d3a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d5c  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000420  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e8  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000169  00000000  00000000  000045ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	6d c0       	rjmp	.+218    	; 0xf6 <__vector_13>
  1c:	97 c0       	rjmp	.+302    	; 0x14c <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 ec       	ldi	r30, 0xC2	; 194
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 36       	cpi	r26, 0x68	; 104
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a8 e6       	ldi	r26, 0x68	; 104
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 32       	cpi	r26, 0x23	; 35
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	bc d1       	rcall	.+888    	; 0x3ca <main>
  52:	b5 c2       	rjmp	.+1386   	; 0x5be <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <flushTwiBuffers>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
  56:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <rxTail>
  rxHead = 0;
  5a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <rxHead>
  txTail = 0;
  5e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <txTail>
  txHead = 0;
  62:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <txHead>
  66:	08 95       	ret

00000068 <usiTwiSlaveInit>:
void
usiTwiSlaveInit(
  uint8_t address
)
{
	slaveAddress = address;
  68:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <slaveAddress>

	twi_stopped = 1;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
  74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
  78:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <rxTail>
  rxHead = 0;
  7c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <rxHead>
  txTail = 0;
  80:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <txTail>
  txHead = 0;
  84:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <txHead>
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	85 60       	ori	r24, 0x05	; 5
  8c:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
  8e:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
  90:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
  92:	b8 98       	cbi	0x17, 0	; 23

  USICR =
  94:	88 ea       	ldi	r24, 0xA8	; 168
  96:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
  98:	80 ef       	ldi	r24, 0xF0	; 240
  9a:	8e b9       	out	0x0e, r24	; 14
  9c:	08 95       	ret

0000009e <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
  9e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <txHead>
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
  a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <txTail>
  aa:	29 17       	cp	r18, r25
  ac:	e1 f3       	breq	.-8      	; 0xa6 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
  ae:	e2 2f       	mov	r30, r18
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	e5 59       	subi	r30, 0x95	; 149
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
  b8:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <txHead>
  bc:	08 95       	ret

000000be <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
  be:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <rxHead>
  c2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxTail>
  c6:	98 17       	cp	r25, r24
  c8:	d1 f3       	breq	.-12     	; 0xbe <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
  ca:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxTail>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxTail>

  // return data from the buffer.
  return rxBuf[ rxTail ];
  d6:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <rxTail>
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	e3 58       	subi	r30, 0x83	; 131
  de:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
  e0:	80 81       	ld	r24, Z
  e2:	08 95       	ret

000000e4 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
  e4:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <rxHead>
  e8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <rxTail>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	29 13       	cpse	r18, r25

} // end usiTwiDataInReceiveBuffer
  f0:	08 95       	ret
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
  f2:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
  f4:	08 95       	ret

000000f6 <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	twi_stopped = 0;
 104:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <twi_stopped+0x1>
 108:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <twi_stopped>

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 10c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <overflowState+0x1>
 110:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <overflowState>

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 114:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_13+0x26>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 118:	b0 99       	sbic	0x16, 0	; 22
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__vector_13+0x2a>
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 11c:	b2 99       	sbic	0x16, 2	; 22
 11e:	fc cf       	rjmp	.-8      	; 0x118 <__vector_13+0x22>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 120:	b0 9b       	sbis	0x16, 0	; 22
 122:	11 c0       	rjmp	.+34     	; 0x146 <__vector_13+0x50>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 124:	88 ea       	ldi	r24, 0xA8	; 168
 126:	8d b9       	out	0x0d, r24	; 13
         // 4-Bit Counter Source = external, both edges
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

		twi_stopped = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
 130:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
  } // end if

  USISR =
 134:	80 ef       	ldi	r24, 0xF0	; 240
 136:	8e b9       	out	0x0e, r24	; 14
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

	// debug
	// PORTB &= ~0x08;
} // end ISR( USI_START_VECTOR )
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti
  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  {

    // a Stop Condition did not occur

    USICR =
 146:	88 ef       	ldi	r24, 0xF8	; 248
 148:	8d b9       	out	0x0d, r24	; 13
 14a:	f4 cf       	rjmp	.-24     	; 0x134 <__vector_13+0x3e>

0000014c <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31

  switch ( overflowState )
 162:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <overflowState>
 166:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <overflowState+0x1>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	91 05       	cpc	r25, r1
 16e:	09 f4       	brne	.+2      	; 0x172 <__vector_14+0x26>
 170:	80 c0       	rjmp	.+256    	; 0x272 <__stack+0x13>
 172:	08 f4       	brcc	.+2      	; 0x176 <__vector_14+0x2a>
 174:	3f c0       	rjmp	.+126    	; 0x1f4 <__vector_14+0xa8>
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	91 05       	cpc	r25, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <__vector_14+0x32>
 17c:	5c c0       	rjmp	.+184    	; 0x236 <__vector_14+0xea>
 17e:	08 f4       	brcc	.+2      	; 0x182 <__vector_14+0x36>
 180:	8c c0       	rjmp	.+280    	; 0x29a <__stack+0x3b>
 182:	05 97       	sbiw	r24, 0x05	; 5
 184:	61 f5       	brne	.+88     	; 0x1de <__vector_14+0x92>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 186:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <rxHead>
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <rxHead>
      rxBuf[ rxHead ] = USIDR;
 192:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <rxHead>
 196:	8f b1       	in	r24, 0x0f	; 15
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e3 58       	subi	r30, 0x83	; 131
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	80 83       	st	Z, r24
			if(val_index < 4) {
 1a0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	60 f4       	brcc	.+24     	; 0x1c0 <__vector_14+0x74>
				// store ring # & 1st 3 values in color values array
				value[val_index] = rxBuf[rxHead];
 1a8:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <val_index>
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <rxHead>
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	a3 58       	subi	r26, 0x83	; 131
 1b6:	bf 4f       	sbci	r27, 0xFF	; 255
 1b8:	8c 91       	ld	r24, X
 1ba:	ed 59       	subi	r30, 0x9D	; 157
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	80 83       	st	Z, r24
			}
			val_index++;
 1c0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <val_index>
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 1d2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_SEND_ACK( );
 1d6:	1f b8       	out	0x0f, r1	; 15
 1d8:	b8 9a       	sbi	0x17, 0	; 23
 1da:	8e e7       	ldi	r24, 0x7E	; 126
 1dc:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	49 f1       	breq	.+82     	; 0x24a <__vector_14+0xfe>
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	89 f7       	brne	.-30     	; 0x1de <__vector_14+0x92>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 1fc:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <txHead>
 200:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <txTail>
 204:	98 17       	cp	r25, r24
 206:	51 f1       	breq	.+84     	; 0x25c <__vector_14+0x110>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 208:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <txTail>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <txTail>
        USIDR = txBuf[ txTail ];
 214:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <txTail>
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	e5 59       	subi	r30, 0x95	; 149
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	8f b9       	out	0x0f, r24	; 15
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
				twi_stopped = 1;
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 22a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_SEND_DATA( );
 22e:	b8 9a       	sbi	0x17, 0	; 23
 230:	80 e7       	ldi	r24, 0x70	; 112
 232:	8e b9       	out	0x0e, r24	; 14
      break;
 234:	d4 cf       	rjmp	.-88     	; 0x1de <__vector_14+0x92>
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 23e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_READ_DATA( );
 242:	b8 98       	cbi	0x17, 0	; 23
 244:	80 e7       	ldi	r24, 0x70	; 112
 246:	8e b9       	out	0x0e, r24	; 14
      break;
 248:	ca cf       	rjmp	.-108    	; 0x1de <__vector_14+0x92>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) ) {
 24a:	8f b1       	in	r24, 0x0f	; 15
 24c:	88 23       	and	r24, r24
 24e:	e1 f0       	breq	.+56     	; 0x288 <__stack+0x29>
 250:	8f b1       	in	r24, 0x0f	; 15
 252:	86 95       	lsr	r24
 254:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <slaveAddress>
 258:	89 17       	cp	r24, r25
 25a:	b1 f0       	breq	.+44     	; 0x288 <__stack+0x29>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 25c:	88 ea       	ldi	r24, 0xA8	; 168
 25e:	8d b9       	out	0x0d, r24	; 13
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	8e b9       	out	0x0e, r24	; 14
				twi_stopped = 1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
 26c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
        return;
 270:	b6 cf       	rjmp	.-148    	; 0x1de <__vector_14+0x92>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 27a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_READ_ACK( );
 27e:	b8 98       	cbi	0x17, 0	; 23
 280:	1f b8       	out	0x0f, r1	; 15
 282:	8e e7       	ldi	r24, 0x7E	; 126
 284:	8e b9       	out	0x0e, r24	; 14
      break;
 286:	ab cf       	rjmp	.-170    	; 0x1de <__vector_14+0x92>
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) ) {
				// debug
				// PORTB |= 0x08;
				if ( USIDR & 0x01 ) {
 288:	78 9b       	sbis	0x0f, 0	; 15
 28a:	0c c0       	rjmp	.+24     	; 0x2a4 <__stack+0x45>
					// Master is writing
          overflowState = USI_SLAVE_SEND_DATA;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 294:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
 298:	9e cf       	rjmp	.-196    	; 0x1d6 <__vector_14+0x8a>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 29a:	8f b1       	in	r24, 0x0f	; 15
 29c:	88 23       	and	r24, r24
 29e:	09 f4       	brne	.+2      	; 0x2a2 <__stack+0x43>
 2a0:	ad cf       	rjmp	.-166    	; 0x1fc <__vector_14+0xb0>
 2a2:	dc cf       	rjmp	.-72     	; 0x25c <__vector_14+0x110>
				if ( USIDR & 0x01 ) {
					// Master is writing
          overflowState = USI_SLAVE_SEND_DATA;
        } else {
					// Master is reading
          overflowState = USI_SLAVE_REQUEST_DATA;
 2a4:	84 e0       	ldi	r24, 0x04	; 4
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 2ac:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
					// prepare to receive color values, starting with red
					val_index = 0;
 2b0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <val_index>
 2b4:	90 cf       	rjmp	.-224    	; 0x1d6 <__vector_14+0x8a>

000002b6 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 2b6:	bc 9a       	sbi	0x17, 4	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 2b8:	9b 01       	movw	r18, r22
 2ba:	22 0f       	add	r18, r18
 2bc:	33 1f       	adc	r19, r19
 2be:	26 0f       	add	r18, r22
 2c0:	37 1f       	adc	r19, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 2c2:	48 b3       	in	r20, 0x18	; 24
 2c4:	4f 7e       	andi	r20, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 2c6:	58 b3       	in	r21, 0x18	; 24
 2c8:	50 61       	ori	r21, 0x10	; 16
  sreg_prev=SREG;
 2ca:	6f b7       	in	r22, 0x3f	; 63
  cli();  
 2cc:	f8 94       	cli

  while (datlen--) {
 2ce:	21 15       	cp	r18, r1
 2d0:	31 05       	cpc	r19, r1
 2d2:	89 f0       	breq	.+34     	; 0x2f6 <loop29+0x18>
 2d4:	fc 01       	movw	r30, r24
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
    curbyte=*data++;
 2da:	21 91       	ld	r18, Z+
    
    asm volatile(
 2dc:	38 e0       	ldi	r19, 0x08	; 8

000002de <loop29>:
 2de:	58 bb       	out	0x18, r21	; 24
 2e0:	27 ff       	sbrs	r18, 7
 2e2:	48 bb       	out	0x18, r20	; 24
 2e4:	22 0f       	add	r18, r18
 2e6:	00 00       	nop
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <loop29+0xc>
 2ea:	48 bb       	out	0x18, r20	; 24
 2ec:	3a 95       	dec	r19
 2ee:	b9 f7       	brne	.-18     	; 0x2de <loop29>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 2f0:	e8 17       	cp	r30, r24
 2f2:	f9 07       	cpc	r31, r25
 2f4:	91 f7       	brne	.-28     	; 0x2da <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 2f6:	6f bf       	out	0x3f, r22	; 63
   \note

   The implementation of _delay_ms() based on
   __builtin_avr_delay_cycles() is not backward compatible with older
   implementations.  In order to get functionality backward compatible
   with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 2f8:	85 e8       	ldi	r24, 0x85	; 133
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <loop29+0x1c>
 2fe:	00 00       	nop
 300:	08 95       	ret

00000302 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 302:	27 b3       	in	r18, 0x17	; 23
 304:	24 2b       	or	r18, r20
 306:	27 bb       	out	0x17, r18	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 308:	9b 01       	movw	r18, r22
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	26 0f       	add	r18, r22
 310:	37 1f       	adc	r19, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 312:	68 b3       	in	r22, 0x18	; 24
 314:	54 2f       	mov	r21, r20
 316:	50 95       	com	r21
 318:	56 23       	and	r21, r22
  maskhi |=        ws2812_PORTREG;
 31a:	68 b3       	in	r22, 0x18	; 24
 31c:	64 2b       	or	r22, r20
  sreg_prev=SREG;
 31e:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 320:	f8 94       	cli

  while (datlen--) {
 322:	21 15       	cp	r18, r1
 324:	31 05       	cpc	r19, r1
 326:	89 f0       	breq	.+34     	; 0x34a <loop76+0x18>
 328:	fc 01       	movw	r30, r24
 32a:	82 0f       	add	r24, r18
 32c:	93 1f       	adc	r25, r19
    curbyte=*data++;
 32e:	21 91       	ld	r18, Z+
    
    asm volatile(
 330:	38 e0       	ldi	r19, 0x08	; 8

00000332 <loop76>:
 332:	68 bb       	out	0x18, r22	; 24
 334:	27 ff       	sbrs	r18, 7
 336:	58 bb       	out	0x18, r21	; 24
 338:	22 0f       	add	r18, r18
 33a:	00 00       	nop
 33c:	00 c0       	rjmp	.+0      	; 0x33e <loop76+0xc>
 33e:	58 bb       	out	0x18, r21	; 24
 340:	3a 95       	dec	r19
 342:	b9 f7       	brne	.-18     	; 0x332 <loop76>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 344:	e8 17       	cp	r30, r24
 346:	f9 07       	cpc	r31, r25
 348:	91 f7       	brne	.-28     	; 0x32e <ws2812_setleds_pin+0x2c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 34a:	4f bf       	out	0x3f, r20	; 63
 34c:	85 e8       	ldi	r24, 0x85	; 133
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <loop76+0x1c>
 352:	00 00       	nop
 354:	08 95       	ret

00000356 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 356:	28 b3       	in	r18, 0x18	; 24
 358:	2f 7e       	andi	r18, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 35a:	38 b3       	in	r19, 0x18	; 24
 35c:	30 61       	ori	r19, 0x10	; 16
  sreg_prev=SREG;
 35e:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 360:	f8 94       	cli

  while (datlen--) {
 362:	61 15       	cp	r22, r1
 364:	71 05       	cpc	r23, r1
 366:	89 f0       	breq	.+34     	; 0x38a <loop113+0x18>
 368:	fc 01       	movw	r30, r24
 36a:	68 0f       	add	r22, r24
 36c:	79 1f       	adc	r23, r25
    curbyte=*data++;
 36e:	81 91       	ld	r24, Z+
    
    asm volatile(
 370:	98 e0       	ldi	r25, 0x08	; 8

00000372 <loop113>:
 372:	38 bb       	out	0x18, r19	; 24
 374:	87 ff       	sbrs	r24, 7
 376:	28 bb       	out	0x18, r18	; 24
 378:	88 0f       	add	r24, r24
 37a:	00 00       	nop
 37c:	00 c0       	rjmp	.+0      	; 0x37e <loop113+0xc>
 37e:	28 bb       	out	0x18, r18	; 24
 380:	9a 95       	dec	r25
 382:	b9 f7       	brne	.-18     	; 0x372 <loop113>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 384:	e6 17       	cp	r30, r22
 386:	f7 07       	cpc	r31, r23
 388:	91 f7       	brne	.-28     	; 0x36e <ws2812_sendarray+0x18>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 38a:	4f bf       	out	0x3f, r20	; 63
 38c:	08 95       	ret

0000038e <ws2812_sendarray_mask>:
 38e:	38 b3       	in	r19, 0x18	; 24
 390:	24 2f       	mov	r18, r20
 392:	20 95       	com	r18
 394:	23 23       	and	r18, r19
 396:	38 b3       	in	r19, 0x18	; 24
 398:	34 2b       	or	r19, r20
 39a:	4f b7       	in	r20, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	61 15       	cp	r22, r1
 3a0:	71 05       	cpc	r23, r1
 3a2:	89 f0       	breq	.+34     	; 0x3c6 <loop144+0x18>
 3a4:	fc 01       	movw	r30, r24
 3a6:	68 0f       	add	r22, r24
 3a8:	79 1f       	adc	r23, r25
 3aa:	81 91       	ld	r24, Z+
 3ac:	98 e0       	ldi	r25, 0x08	; 8

000003ae <loop144>:
 3ae:	38 bb       	out	0x18, r19	; 24
 3b0:	87 ff       	sbrs	r24, 7
 3b2:	28 bb       	out	0x18, r18	; 24
 3b4:	88 0f       	add	r24, r24
 3b6:	00 00       	nop
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <loop144+0xc>
 3ba:	28 bb       	out	0x18, r18	; 24
 3bc:	9a 95       	dec	r25
 3be:	b9 f7       	brne	.-18     	; 0x3ae <loop144>
 3c0:	e6 17       	cp	r30, r22
 3c2:	f7 07       	cpc	r31, r23
 3c4:	91 f7       	brne	.-28     	; 0x3aa <ws2812_sendarray_mask+0x1c>
 3c6:	4f bf       	out	0x3f, r20	; 63
 3c8:	08 95       	ret

000003ca <main>:
{
  unsigned char temp;
	uint8_t i;
	uint8_t displayed = 0;  // have we displayed new values yet?

  DDRB  = ONE_PIN | TWO_PIN | THREE_PIN; // Set to output
 3ca:	8a e1       	ldi	r24, 0x1A	; 26
 3cc:	87 bb       	out	0x17, r24	; 23
  PORTB = ONE_PIN | TWO_PIN | THREE_PIN; // Startup pattern
 3ce:	88 bb       	out	0x18, r24	; 24
  // DDRB  = ONE_PIN; // Set to output
  // PORTB = ONE_PIN; // Startup pattern
  // DDRB |= 0x08; // debug

	for(val_index = 0; val_index < 3; val_index++) {
 3d0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <val_index>
 3d4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	78 f4       	brcc	.+30     	; 0x3fa <main+0x30>
		value[val_index] = 0;
 3dc:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <val_index>
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ed 59       	subi	r30, 0x9D	; 157
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	10 82       	st	Z, r1
  PORTB = ONE_PIN | TWO_PIN | THREE_PIN; // Startup pattern
  // DDRB  = ONE_PIN; // Set to output
  // PORTB = ONE_PIN; // Startup pattern
  // DDRB |= 0x08; // debug

	for(val_index = 0; val_index < 3; val_index++) {
 3e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <val_index>
 3f2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	88 f3       	brcs	.-30     	; 0x3dc <main+0x12>
		value[val_index] = 0;
	}
	value[1] = 15;
 3fa:	8f e0       	ldi	r24, 0x0F	; 15
 3fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <value+0x1>
	val_index = 0;
 400:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <val_index>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	84 e3       	ldi	r24, 0x34	; 52
 408:	9c e0       	ldi	r25, 0x0C	; 12
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	cd e8       	ldi	r28, 0x8D	; 141
 418:	d0 e0       	ldi	r29, 0x00	; 0
 41a:	af ee       	ldi	r26, 0xEF	; 239
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	ed eb       	ldi	r30, 0xBD	; 189
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0

			strip3[k].r = 0;
			strip3[k].g = 0;
			strip3[k].b = 20;
		} else {
			strip1[k].r = 15;
 426:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
		if(k % 2) {
			strip1[k].r = 0;
			strip1[k].g = 0;
			strip1[k].b = 20;
 428:	34 e1       	ldi	r19, 0x14	; 20
			strip3[k].b = 15;
		}

		// debug - which strip is which?
		if(k == 4) {
			strip1[k].r = 100;
 42a:	24 e6       	ldi	r18, 0x64	; 100
 42c:	16 c0       	rjmp	.+44     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
		if(k % 2) {
			strip1[k].r = 0;
 42e:	11 82       	std	Z+1, r1	; 0x01
			strip1[k].g = 0;
 430:	10 82       	st	Z, r1
			strip1[k].b = 20;
 432:	32 83       	std	Z+2, r19	; 0x02

			strip2[k].r = 0;
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	1c 92       	st	X, r1
 438:	11 97       	sbiw	r26, 0x01	; 1
			strip2[k].g = 0;
 43a:	1c 92       	st	X, r1
			strip2[k].b = 20;
 43c:	12 96       	adiw	r26, 0x02	; 2
 43e:	3c 93       	st	X, r19
 440:	12 97       	sbiw	r26, 0x02	; 2

			strip3[k].r = 0;
 442:	19 82       	std	Y+1, r1	; 0x01
			strip3[k].g = 0;
 444:	18 82       	st	Y, r1
			strip3[k].b = 20;
 446:	3a 83       	std	Y+2, r19	; 0x02
			strip3[k].g = 15;
			strip3[k].b = 15;
		}

		// debug - which strip is which?
		if(k == 4) {
 448:	94 30       	cpi	r25, 0x04	; 4
 44a:	c1 f0       	breq	.+48     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	value[1] = 15;
	val_index = 0;

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
 44c:	40 31       	cpi	r20, 0x10	; 16
 44e:	49 f1       	breq	.+82     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 450:	9f 5f       	subi	r25, 0xFF	; 255
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	33 96       	adiw	r30, 0x03	; 3
 456:	13 96       	adiw	r26, 0x03	; 3
 458:	23 96       	adiw	r28, 0x03	; 3
		if(k % 2) {
 45a:	90 fd       	sbrc	r25, 0
 45c:	e8 cf       	rjmp	.-48     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

			strip3[k].r = 0;
			strip3[k].g = 0;
			strip3[k].b = 20;
		} else {
			strip1[k].r = 15;
 45e:	81 83       	std	Z+1, r24	; 0x01
			strip1[k].g = 15;
 460:	80 83       	st	Z, r24
			strip1[k].b = 15;
 462:	82 83       	std	Z+2, r24	; 0x02

			strip2[k].r = 15;
 464:	11 96       	adiw	r26, 0x01	; 1
 466:	8c 93       	st	X, r24
 468:	11 97       	sbiw	r26, 0x01	; 1
			strip2[k].g = 15;
 46a:	8c 93       	st	X, r24
			strip2[k].b = 15;
 46c:	12 96       	adiw	r26, 0x02	; 2
 46e:	8c 93       	st	X, r24
 470:	12 97       	sbiw	r26, 0x02	; 2
						
			strip3[k].r = 15;
 472:	89 83       	std	Y+1, r24	; 0x01
			strip3[k].g = 15;
 474:	88 83       	st	Y, r24
			strip3[k].b = 15;
 476:	8a 83       	std	Y+2, r24	; 0x02
		}

		// debug - which strip is which?
		if(k == 4) {
 478:	94 30       	cpi	r25, 0x04	; 4
 47a:	41 f7       	brne	.-48     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
			strip1[k].r = 100;
 47c:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <strip1+0xd>
			strip1[k].g = 0;
 480:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <strip1+0xc>
			strip1[k].b = 0;
 484:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <strip1+0xe>

			strip2[k].r = 0;
 488:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <strip2+0xd>
			strip2[k].g = 100;
 48c:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <strip2+0xc>
			strip2[k].b = 0;
 490:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <strip2+0xe>

			strip3[k].r = 0;
 494:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <strip3+0xd>
			strip3[k].g = 0;
 498:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <strip3+0xc>
			strip3[k].b = 100;
 49c:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <strip3+0xe>
 4a0:	d7 cf       	rjmp	.-82     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}

	}
	ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
 4a2:	42 e0       	ldi	r20, 0x02	; 2
 4a4:	60 e1       	ldi	r22, 0x10	; 16
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	8d eb       	ldi	r24, 0xBD	; 189
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2a df       	rcall	.-428    	; 0x302 <ws2812_setleds_pin>
	ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
 4ae:	48 e0       	ldi	r20, 0x08	; 8
 4b0:	60 e1       	ldi	r22, 0x10	; 16
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	8f ee       	ldi	r24, 0xEF	; 239
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	24 df       	rcall	.-440    	; 0x302 <ws2812_setleds_pin>
	ws2812_setleds_pin(strip3, NUM_PIXELS, THREE_PIN);
 4ba:	40 e1       	ldi	r20, 0x10	; 16
 4bc:	60 e1       	ldi	r22, 0x10	; 16
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	8d e8       	ldi	r24, 0x8D	; 141
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	1e df       	rcall	.-452    	; 0x302 <ws2812_setleds_pin>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	80 e7       	ldi	r24, 0x70	; 112
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	84 e3       	ldi	r24, 0x34	; 52
 4dc:	9c e0       	ldi	r25, 0x0C	; 12
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
	_delay_ms(100);

	_delay_ms(500);

  usiTwiSlaveInit(TWI_slaveAddress);
 4ea:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TWI_slaveAddress>
 4ee:	bc dd       	rcall	.-1160   	; 0x68 <usiTwiSlaveInit>

  // __enable_interrupt();
	sei();
 4f0:	78 94       	sei
// __C_task void main( void )
int main( void )
{
  unsigned char temp;
	uint8_t i;
	uint8_t displayed = 0;  // have we displayed new values yet?
 4f2:	f1 2c       	mov	r15, r1
 4f4:	0f e1       	ldi	r16, 0x1F	; 31
 4f6:	11 e0       	ldi	r17, 0x01	; 1
 4f8:	cd eb       	ldi	r28, 0xBD	; 189
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
	sei();

  // This loop runs forever. If the TWI Transceiver is busy the execution will just continue doing other operations.
  for(;;) {

		if( usiTwiDataInReceiveBuffer() )
 4fc:	f3 dd       	rcall	.-1050   	; 0xe4 <usiTwiDataInReceiveBuffer>
 4fe:	81 11       	cpse	r24, r1
 500:	14 c0       	rjmp	.+40     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
				*/
				// usiTwiTransmitByte(temp);
			}

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
 502:	f1 10       	cpse	r15, r1
 504:	fb cf       	rjmp	.-10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 506:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 50a:	84 30       	cpi	r24, 0x04	; 4
 50c:	98 f0       	brcs	.+38     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
			switch(value[0]) {
 50e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <value>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	89 f0       	breq	.+34     	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 516:	83 30       	cpi	r24, 0x03	; 3
 518:	e1 f1       	breq	.+120    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	19 f1       	breq	.+70     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			// don't display again until a new command is received
			displayed = 1;

			// ensure the rx buffer is empty
			// this will cause us to wait for next start state
			flushTwiBuffers();
 51e:	9b dd       	rcall	.-1226   	; 0x56 <flushTwiBuffers>
			default:
				break;

			}
			// don't display again until a new command is received
			displayed = 1;
 520:	ff 24       	eor	r15, r15
 522:	f3 94       	inc	r15
	sei();

  // This loop runs forever. If the TWI Transceiver is busy the execution will just continue doing other operations.
  for(;;) {

		if( usiTwiDataInReceiveBuffer() )
 524:	df dd       	rcall	.-1090   	; 0xe4 <usiTwiDataInReceiveBuffer>
 526:	88 23       	and	r24, r24
 528:	61 f3       	breq	.-40     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			{
				temp = usiTwiReceiveByte();
 52a:	c9 dd       	rcall	.-1134   	; 0xbe <usiTwiReceiveByte>
				*/
				// usiTwiTransmitByte(temp);
			}

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
 52c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 530:	84 30       	cpi	r24, 0x04	; 4
 532:	68 f7       	brcc	.-38     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 534:	f1 2c       	mov	r15, r1
 536:	e2 cf       	rjmp	.-60     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			switch(value[0]) {
 538:	ef ee       	ldi	r30, 0xEF	; 239
 53a:	f0 e0       	ldi	r31, 0x00	; 0
				ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
				break;

			case 2:
				for(i = 0; i < NUM_PIXELS; i++) {
					strip2[i].r = value[1];
 53c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <value+0x1>
 540:	81 83       	std	Z+1, r24	; 0x01
					strip2[i].g = value[2];
 542:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <value+0x2>
 546:	80 83       	st	Z, r24
					strip2[i].b = value[3];
 548:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
 54c:	82 83       	std	Z+2, r24	; 0x02
 54e:	33 96       	adiw	r30, 0x03	; 3
				}
				ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
				break;

			case 2:
				for(i = 0; i < NUM_PIXELS; i++) {
 550:	0e 17       	cp	r16, r30
 552:	1f 07       	cpc	r17, r31
 554:	99 f7       	brne	.-26     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
						 strip2[i].g = 50;
						 strip2[i].b = 0;
					*/
						
				}
				ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
 556:	48 e0       	ldi	r20, 0x08	; 8
 558:	60 e1       	ldi	r22, 0x10	; 16
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	8f ee       	ldi	r24, 0xEF	; 239
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	d0 de       	rcall	.-608    	; 0x302 <ws2812_setleds_pin>
				break;
 562:	dd cf       	rjmp	.-70     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
				// usiTwiTransmitByte(temp);
			}

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {
 564:	ed eb       	ldi	r30, 0xBD	; 189
 566:	f0 e0       	ldi	r31, 0x00	; 0

			case 1:
				for(i = 0; i < NUM_PIXELS; i++) {
					strip1[i].r = value[1];
 568:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <value+0x1>
 56c:	81 83       	std	Z+1, r24	; 0x01
					strip1[i].g = value[2];
 56e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <value+0x2>
 572:	80 83       	st	Z, r24
					strip1[i].b = value[3];
 574:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
 578:	82 83       	std	Z+2, r24	; 0x02
 57a:	33 96       	adiw	r30, 0x03	; 3
		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {

			case 1:
				for(i = 0; i < NUM_PIXELS; i++) {
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	ed 3e       	cpi	r30, 0xED	; 237
 580:	f2 07       	cpc	r31, r18
 582:	91 f7       	brne	.-28     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
						 strip1[i].g = 0;
						 strip1[i].b = 0;
					*/
						
				}
				ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
 584:	42 e0       	ldi	r20, 0x02	; 2
 586:	60 e1       	ldi	r22, 0x10	; 16
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	8d eb       	ldi	r24, 0xBD	; 189
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	b9 de       	rcall	.-654    	; 0x302 <ws2812_setleds_pin>
				break;
 590:	c6 cf       	rjmp	.-116    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
				// usiTwiTransmitByte(temp);
			}

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {
 592:	ed e8       	ldi	r30, 0x8D	; 141
 594:	f0 e0       	ldi	r31, 0x00	; 0
				ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
				break;

			case 3:
				for(i = 0; i < NUM_PIXELS; i++) {
					strip3[i].r = value[1];
 596:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <value+0x1>
 59a:	81 83       	std	Z+1, r24	; 0x01
					strip3[i].g = value[2];
 59c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <value+0x2>
 5a0:	80 83       	st	Z, r24
					strip3[i].b = value[3];
 5a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
 5a6:	82 83       	std	Z+2, r24	; 0x02
 5a8:	33 96       	adiw	r30, 0x03	; 3
				}
				ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
				break;

			case 3:
				for(i = 0; i < NUM_PIXELS; i++) {
 5aa:	ce 17       	cp	r28, r30
 5ac:	df 07       	cpc	r29, r31
 5ae:	99 f7       	brne	.-26     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
						 strip3[i].g = 0;
						 strip3[i].b = 50;
					*/
						
				}
				ws2812_setleds_pin(strip3, NUM_PIXELS, THREE_PIN);
 5b0:	40 e1       	ldi	r20, 0x10	; 16
 5b2:	60 e1       	ldi	r22, 0x10	; 16
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	8d e8       	ldi	r24, 0x8D	; 141
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	a3 de       	rcall	.-698    	; 0x302 <ws2812_setleds_pin>
				break;
 5bc:	b0 cf       	rjmp	.-160    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>

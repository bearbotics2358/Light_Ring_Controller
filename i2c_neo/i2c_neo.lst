
i2c_neo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000054c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bb  00800068  00800068  000005e8  2**0
                  ALLOC
  3 .stab         000019ec  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bae  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003b82  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003ba4  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000420  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e8  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000169  00000000  00000000  00004402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	64 c0       	rjmp	.+200    	; 0xe4 <__vector_13>
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e4       	ldi	r30, 0x4C	; 76
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 36       	cpi	r26, 0x68	; 104
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a8 e6       	ldi	r26, 0x68	; 104
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 32       	cpi	r26, 0x23	; 35
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	af d1       	rcall	.+862    	; 0x3b0 <main>
  52:	7a c2       	rjmp	.+1268   	; 0x548 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <usiTwiSlaveInit>:
void
usiTwiSlaveInit(
  uint8_t address
)
{
	slaveAddress = address;
  56:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <slaveAddress>

	twi_stopped = 1;
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
  62:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
  66:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <rxTail>
  rxHead = 0;
  6a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <rxHead>
  txTail = 0;
  6e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <txTail>
  txHead = 0;
  72:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <txHead>
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
  76:	87 b3       	in	r24, 0x17	; 23
  78:	85 60       	ori	r24, 0x05	; 5
  7a:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
  7c:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
  7e:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
  80:	b8 98       	cbi	0x17, 0	; 23

  USICR =
  82:	88 ea       	ldi	r24, 0xA8	; 168
  84:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
  86:	80 ef       	ldi	r24, 0xF0	; 240
  88:	8e b9       	out	0x0e, r24	; 14
  8a:	08 95       	ret

0000008c <usiTwiTransmitByte>:
{

  uint8_t tmphead;

  // calculate buffer index
  tmphead = ( txHead + 1 ) & TWI_TX_BUFFER_MASK;
  8c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <txHead>
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	2f 70       	andi	r18, 0x0F	; 15

  // wait for free space in buffer
  while ( tmphead == txTail );
  94:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <txTail>
  98:	29 17       	cp	r18, r25
  9a:	e1 f3       	breq	.-8      	; 0x94 <usiTwiTransmitByte+0x8>

  // store data in buffer
  txBuf[ tmphead ] = data;
  9c:	e2 2f       	mov	r30, r18
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e5 59       	subi	r30, 0x95	; 149
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24

  // store new index
  txHead = tmphead;
  a6:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <txHead>
  aa:	08 95       	ret

000000ac <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
  ac:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <rxHead>
  b0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxTail>
  b4:	98 17       	cp	r25, r24
  b6:	d1 f3       	breq	.-12     	; 0xac <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
  b8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <rxTail>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <rxTail>

  // return data from the buffer.
  return rxBuf[ rxTail ];
  c4:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <rxTail>
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	e3 58       	subi	r30, 0x83	; 131
  cc:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
  ce:	80 81       	ld	r24, Z
  d0:	08 95       	ret

000000d2 <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
  d2:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <rxHead>
  d6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <rxTail>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	29 13       	cpse	r18, r25

} // end usiTwiDataInReceiveBuffer
  de:	08 95       	ret
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
  e0:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
  e2:	08 95       	ret

000000e4 <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	twi_stopped = 0;
  f2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <twi_stopped+0x1>
  f6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <twi_stopped>

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
  fa:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <overflowState+0x1>
  fe:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <overflowState>

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 102:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 104:	02 c0       	rjmp	.+4      	; 0x10a <__vector_13+0x26>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 106:	b0 99       	sbic	0x16, 0	; 22
 108:	02 c0       	rjmp	.+4      	; 0x10e <__vector_13+0x2a>
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 10a:	b2 99       	sbic	0x16, 2	; 22
 10c:	fc cf       	rjmp	.-8      	; 0x106 <__vector_13+0x22>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 10e:	b0 9b       	sbis	0x16, 0	; 22
 110:	11 c0       	rjmp	.+34     	; 0x134 <__vector_13+0x50>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 112:	88 ea       	ldi	r24, 0xA8	; 168
 114:	8d b9       	out	0x0d, r24	; 13
         // 4-Bit Counter Source = external, both edges
         ( 1 << USICS1 ) | ( 0 << USICS0 ) | ( 0 << USICLK ) |
         // no toggle clock-port pin
         ( 0 << USITC );

		twi_stopped = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
 11e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
  } // end if

  USISR =
 122:	80 ef       	ldi	r24, 0xF0	; 240
 124:	8e b9       	out	0x0e, r24	; 14
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

	// debug
	// PORTB &= ~0x08;
} // end ISR( USI_START_VECTOR )
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti
  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  {

    // a Stop Condition did not occur

    USICR =
 134:	88 ef       	ldi	r24, 0xF8	; 248
 136:	8d b9       	out	0x0d, r24	; 13
 138:	f4 cf       	rjmp	.-24     	; 0x122 <__vector_13+0x3e>

0000013a <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31

  switch ( overflowState )
 150:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <overflowState>
 154:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <overflowState+0x1>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	91 05       	cpc	r25, r1
 15c:	09 f4       	brne	.+2      	; 0x160 <__vector_14+0x26>
 15e:	7c c0       	rjmp	.+248    	; 0x258 <__vector_14+0x11e>
 160:	e0 f1       	brcs	.+120    	; 0x1da <__vector_14+0xa0>
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	91 05       	cpc	r25, r1
 166:	09 f4       	brne	.+2      	; 0x16a <__vector_14+0x30>
 168:	59 c0       	rjmp	.+178    	; 0x21c <__vector_14+0xe2>
 16a:	08 f4       	brcc	.+2      	; 0x16e <__vector_14+0x34>
 16c:	89 c0       	rjmp	.+274    	; 0x280 <__stack+0x21>
 16e:	05 97       	sbiw	r24, 0x05	; 5
 170:	49 f5       	brne	.+82     	; 0x1c4 <__vector_14+0x8a>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 172:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <rxHead>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <rxHead>
      rxBuf[ rxHead ] = USIDR;
 17e:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <rxHead>
 182:	8f b1       	in	r24, 0x0f	; 15
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e3 58       	subi	r30, 0x83	; 131
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	80 83       	st	Z, r24
			if(val_index < 4) {
 18c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	58 f4       	brcc	.+22     	; 0x1aa <__vector_14+0x70>
				// store ring # & 1st 3 values in color values array
				value[val_index] = rxBuf[rxHead];
 194:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <rxHead>
 198:	a8 2f       	mov	r26, r24
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	ad 59       	subi	r26, 0x9D	; 157
 19e:	bf 4f       	sbci	r27, 0xFF	; 255
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e3 58       	subi	r30, 0x83	; 131
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	90 81       	ld	r25, Z
 1a8:	9c 93       	st	X, r25
			}
			val_index++;
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <val_index>
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 1b8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_SEND_ACK( );
 1bc:	1f b8       	out	0x0f, r1	; 15
 1be:	b8 9a       	sbi	0x17, 0	; 23
 1c0:	8e e7       	ldi	r24, 0x7E	; 126
 1c2:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti
********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{

  switch ( overflowState )
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	49 f1       	breq	.+82     	; 0x230 <__vector_14+0xf6>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	89 f7       	brne	.-30     	; 0x1c4 <__vector_14+0x8a>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 1e2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <txHead>
 1e6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <txTail>
 1ea:	98 17       	cp	r25, r24
 1ec:	51 f1       	breq	.+84     	; 0x242 <__vector_14+0x108>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 1ee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <txTail>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <txTail>
        USIDR = txBuf[ txTail ];
 1fa:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <txTail>
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e5 59       	subi	r30, 0x95	; 149
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	80 81       	ld	r24, Z
 206:	8f b9       	out	0x0f, r24	; 15
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
				twi_stopped = 1;
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 210:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_SEND_DATA( );
 214:	b8 9a       	sbi	0x17, 0	; 23
 216:	80 e7       	ldi	r24, 0x70	; 112
 218:	8e b9       	out	0x0e, r24	; 14
      break;
 21a:	d4 cf       	rjmp	.-88     	; 0x1c4 <__vector_14+0x8a>
      break;

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 224:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_READ_DATA( );
 228:	b8 98       	cbi	0x17, 0	; 23
 22a:	80 e7       	ldi	r24, 0x70	; 112
 22c:	8e b9       	out	0x0e, r24	; 14
      break;
 22e:	ca cf       	rjmp	.-108    	; 0x1c4 <__vector_14+0x8a>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) ) {
 230:	8f b1       	in	r24, 0x0f	; 15
 232:	88 23       	and	r24, r24
 234:	e1 f0       	breq	.+56     	; 0x26e <__stack+0xf>
 236:	8f b1       	in	r24, 0x0f	; 15
 238:	86 95       	lsr	r24
 23a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <slaveAddress>
 23e:	89 17       	cp	r24, r25
 240:	b1 f0       	breq	.+44     	; 0x26e <__stack+0xf>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 242:	88 ea       	ldi	r24, 0xA8	; 168
 244:	8d b9       	out	0x0d, r24	; 13
 246:	80 e7       	ldi	r24, 0x70	; 112
 248:	8e b9       	out	0x0e, r24	; 14
				twi_stopped = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <twi_stopped+0x1>
 252:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <twi_stopped>
        return;
 256:	b6 cf       	rjmp	.-148    	; 0x1c4 <__vector_14+0x8a>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 260:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
      SET_USI_TO_READ_ACK( );
 264:	b8 98       	cbi	0x17, 0	; 23
 266:	1f b8       	out	0x0f, r1	; 15
 268:	8e e7       	ldi	r24, 0x7E	; 126
 26a:	8e b9       	out	0x0e, r24	; 14
      break;
 26c:	ab cf       	rjmp	.-170    	; 0x1c4 <__vector_14+0x8a>
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) ) {
				// debug
				// PORTB |= 0x08;
				if ( USIDR & 0x01 ) {
 26e:	78 9b       	sbis	0x0f, 0	; 15
 270:	0c c0       	rjmp	.+24     	; 0x28a <__stack+0x2b>
					// Master is writing
          overflowState = USI_SLAVE_SEND_DATA;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 27a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
 27e:	9e cf       	rjmp	.-196    	; 0x1bc <__vector_14+0x82>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 280:	8f b1       	in	r24, 0x0f	; 15
 282:	88 23       	and	r24, r24
 284:	09 f4       	brne	.+2      	; 0x288 <__stack+0x29>
 286:	ad cf       	rjmp	.-166    	; 0x1e2 <__vector_14+0xa8>
 288:	dc cf       	rjmp	.-72     	; 0x242 <__vector_14+0x108>
				if ( USIDR & 0x01 ) {
					// Master is writing
          overflowState = USI_SLAVE_SEND_DATA;
        } else {
					// Master is reading
          overflowState = USI_SLAVE_REQUEST_DATA;
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 ee 00 	sts	0x00EE, r25	; 0x8000ee <overflowState+0x1>
 292:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <overflowState>
					// prepare to receive color values, starting with red
					val_index = 0;
 296:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <val_index>
 29a:	90 cf       	rjmp	.-224    	; 0x1bc <__vector_14+0x82>

0000029c <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 29c:	bc 9a       	sbi	0x17, 4	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 29e:	9b 01       	movw	r18, r22
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	26 0f       	add	r18, r22
 2a6:	37 1f       	adc	r19, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 2a8:	48 b3       	in	r20, 0x18	; 24
 2aa:	4f 7e       	andi	r20, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 2ac:	58 b3       	in	r21, 0x18	; 24
 2ae:	50 61       	ori	r21, 0x10	; 16
  sreg_prev=SREG;
 2b0:	6f b7       	in	r22, 0x3f	; 63
  cli();  
 2b2:	f8 94       	cli

  while (datlen--) {
 2b4:	21 15       	cp	r18, r1
 2b6:	31 05       	cpc	r19, r1
 2b8:	89 f0       	breq	.+34     	; 0x2dc <loop29+0x18>
 2ba:	fc 01       	movw	r30, r24
 2bc:	82 0f       	add	r24, r18
 2be:	93 1f       	adc	r25, r19
    curbyte=*data++;
 2c0:	21 91       	ld	r18, Z+
    
    asm volatile(
 2c2:	38 e0       	ldi	r19, 0x08	; 8

000002c4 <loop29>:
 2c4:	58 bb       	out	0x18, r21	; 24
 2c6:	27 ff       	sbrs	r18, 7
 2c8:	48 bb       	out	0x18, r20	; 24
 2ca:	22 0f       	add	r18, r18
 2cc:	00 00       	nop
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <loop29+0xc>
 2d0:	48 bb       	out	0x18, r20	; 24
 2d2:	3a 95       	dec	r19
 2d4:	b9 f7       	brne	.-18     	; 0x2c4 <loop29>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 2d6:	e8 17       	cp	r30, r24
 2d8:	f9 07       	cpc	r31, r25
 2da:	91 f7       	brne	.-28     	; 0x2c0 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 2dc:	6f bf       	out	0x3f, r22	; 63
   \note

   The implementation of _delay_ms() based on
   __builtin_avr_delay_cycles() is not backward compatible with older
   implementations.  In order to get functionality backward compatible
   with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 2de:	85 e8       	ldi	r24, 0x85	; 133
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <loop29+0x1c>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 2e8:	27 b3       	in	r18, 0x17	; 23
 2ea:	24 2b       	or	r18, r20
 2ec:	27 bb       	out	0x17, r18	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 2ee:	9b 01       	movw	r18, r22
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	26 0f       	add	r18, r22
 2f6:	37 1f       	adc	r19, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 2f8:	68 b3       	in	r22, 0x18	; 24
 2fa:	54 2f       	mov	r21, r20
 2fc:	50 95       	com	r21
 2fe:	56 23       	and	r21, r22
  maskhi |=        ws2812_PORTREG;
 300:	68 b3       	in	r22, 0x18	; 24
 302:	64 2b       	or	r22, r20
  sreg_prev=SREG;
 304:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 306:	f8 94       	cli

  while (datlen--) {
 308:	21 15       	cp	r18, r1
 30a:	31 05       	cpc	r19, r1
 30c:	89 f0       	breq	.+34     	; 0x330 <loop76+0x18>
 30e:	fc 01       	movw	r30, r24
 310:	82 0f       	add	r24, r18
 312:	93 1f       	adc	r25, r19
    curbyte=*data++;
 314:	21 91       	ld	r18, Z+
    
    asm volatile(
 316:	38 e0       	ldi	r19, 0x08	; 8

00000318 <loop76>:
 318:	68 bb       	out	0x18, r22	; 24
 31a:	27 ff       	sbrs	r18, 7
 31c:	58 bb       	out	0x18, r21	; 24
 31e:	22 0f       	add	r18, r18
 320:	00 00       	nop
 322:	00 c0       	rjmp	.+0      	; 0x324 <loop76+0xc>
 324:	58 bb       	out	0x18, r21	; 24
 326:	3a 95       	dec	r19
 328:	b9 f7       	brne	.-18     	; 0x318 <loop76>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 32a:	e8 17       	cp	r30, r24
 32c:	f9 07       	cpc	r31, r25
 32e:	91 f7       	brne	.-28     	; 0x314 <ws2812_setleds_pin+0x2c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 330:	4f bf       	out	0x3f, r20	; 63
 332:	85 e8       	ldi	r24, 0x85	; 133
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <loop76+0x1c>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 33c:	28 b3       	in	r18, 0x18	; 24
 33e:	2f 7e       	andi	r18, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 340:	38 b3       	in	r19, 0x18	; 24
 342:	30 61       	ori	r19, 0x10	; 16
  sreg_prev=SREG;
 344:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 346:	f8 94       	cli

  while (datlen--) {
 348:	61 15       	cp	r22, r1
 34a:	71 05       	cpc	r23, r1
 34c:	89 f0       	breq	.+34     	; 0x370 <loop113+0x18>
 34e:	fc 01       	movw	r30, r24
 350:	68 0f       	add	r22, r24
 352:	79 1f       	adc	r23, r25
    curbyte=*data++;
 354:	81 91       	ld	r24, Z+
    
    asm volatile(
 356:	98 e0       	ldi	r25, 0x08	; 8

00000358 <loop113>:
 358:	38 bb       	out	0x18, r19	; 24
 35a:	87 ff       	sbrs	r24, 7
 35c:	28 bb       	out	0x18, r18	; 24
 35e:	88 0f       	add	r24, r24
 360:	00 00       	nop
 362:	00 c0       	rjmp	.+0      	; 0x364 <loop113+0xc>
 364:	28 bb       	out	0x18, r18	; 24
 366:	9a 95       	dec	r25
 368:	b9 f7       	brne	.-18     	; 0x358 <loop113>
  masklo	=~maskhi&ws2812_PORTREG;
  maskhi |=        ws2812_PORTREG;
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 36a:	e6 17       	cp	r30, r22
 36c:	f7 07       	cpc	r31, r23
 36e:	91 f7       	brne	.-28     	; 0x354 <ws2812_sendarray+0x18>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 370:	4f bf       	out	0x3f, r20	; 63
 372:	08 95       	ret

00000374 <ws2812_sendarray_mask>:
 374:	38 b3       	in	r19, 0x18	; 24
 376:	24 2f       	mov	r18, r20
 378:	20 95       	com	r18
 37a:	23 23       	and	r18, r19
 37c:	38 b3       	in	r19, 0x18	; 24
 37e:	34 2b       	or	r19, r20
 380:	4f b7       	in	r20, 0x3f	; 63
 382:	f8 94       	cli
 384:	61 15       	cp	r22, r1
 386:	71 05       	cpc	r23, r1
 388:	89 f0       	breq	.+34     	; 0x3ac <loop144+0x18>
 38a:	fc 01       	movw	r30, r24
 38c:	68 0f       	add	r22, r24
 38e:	79 1f       	adc	r23, r25
 390:	81 91       	ld	r24, Z+
 392:	98 e0       	ldi	r25, 0x08	; 8

00000394 <loop144>:
 394:	38 bb       	out	0x18, r19	; 24
 396:	87 ff       	sbrs	r24, 7
 398:	28 bb       	out	0x18, r18	; 24
 39a:	88 0f       	add	r24, r24
 39c:	00 00       	nop
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <loop144+0xc>
 3a0:	28 bb       	out	0x18, r18	; 24
 3a2:	9a 95       	dec	r25
 3a4:	b9 f7       	brne	.-18     	; 0x394 <loop144>
 3a6:	e6 17       	cp	r30, r22
 3a8:	f7 07       	cpc	r31, r23
 3aa:	91 f7       	brne	.-28     	; 0x390 <ws2812_sendarray_mask+0x1c>
 3ac:	4f bf       	out	0x3f, r20	; 63
 3ae:	08 95       	ret

000003b0 <main>:
{
  unsigned char temp;
	uint8_t i;
	uint8_t displayed = 0;  // have we displayed new values yet?

  DDRB  = ONE_PIN | TWO_PIN | THREE_PIN; // Set to output
 3b0:	8a e1       	ldi	r24, 0x1A	; 26
 3b2:	87 bb       	out	0x17, r24	; 23
  PORTB = ONE_PIN | TWO_PIN | THREE_PIN; // Startup pattern
 3b4:	88 bb       	out	0x18, r24	; 24
  // DDRB  = ONE_PIN; // Set to output
  // PORTB = ONE_PIN; // Startup pattern
  // DDRB |= 0x08; // debug

	for(val_index = 0; val_index < 3; val_index++) {
		value[val_index] = 0;
 3b6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <value>
 3ba:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <value+0x2>
	}
	value[1] = 15;
 3be:	8f e0       	ldi	r24, 0x0F	; 15
 3c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <value+0x1>
	val_index = 0;
 3c4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <val_index>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	84 e3       	ldi	r24, 0x34	; 52
 3cc:	9c e0       	ldi	r25, 0x0C	; 12
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x1e>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x28>
 3d8:	00 00       	nop
 3da:	cd e8       	ldi	r28, 0x8D	; 141
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
 3de:	af ee       	ldi	r26, 0xEF	; 239
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	ed eb       	ldi	r30, 0xBD	; 189
 3e4:	f0 e0       	ldi	r31, 0x00	; 0

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
 3e6:	90 e0       	ldi	r25, 0x00	; 0

			strip3[k].r = 0;
			strip3[k].g = 0;
			strip3[k].b = 20;
		} else {
			strip1[k].r = 15;
 3e8:	8f e0       	ldi	r24, 0x0F	; 15
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
		if(k % 2) {
			strip1[k].r = 0;
			strip1[k].g = 0;
			strip1[k].b = 20;
 3ea:	24 e1       	ldi	r18, 0x14	; 20
 3ec:	13 c0       	rjmp	.+38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
		if(k % 2) {
			strip1[k].r = 0;
 3ee:	11 82       	std	Z+1, r1	; 0x01
			strip1[k].g = 0;
 3f0:	10 82       	st	Z, r1
			strip1[k].b = 20;
 3f2:	22 83       	std	Z+2, r18	; 0x02

			strip2[k].r = 0;
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	1c 92       	st	X, r1
 3f8:	11 97       	sbiw	r26, 0x01	; 1
			strip2[k].g = 0;
 3fa:	1c 92       	st	X, r1
			strip2[k].b = 20;
 3fc:	12 96       	adiw	r26, 0x02	; 2
 3fe:	2c 93       	st	X, r18
 400:	12 97       	sbiw	r26, 0x02	; 2

			strip3[k].r = 0;
 402:	19 82       	std	Y+1, r1	; 0x01
			strip3[k].g = 0;
 404:	18 82       	st	Y, r1
			strip3[k].b = 20;
 406:	2a 83       	std	Y+2, r18	; 0x02
	value[1] = 15;
	val_index = 0;

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
 408:	9f 5f       	subi	r25, 0xFF	; 255
 40a:	33 96       	adiw	r30, 0x03	; 3
 40c:	13 96       	adiw	r26, 0x03	; 3
 40e:	23 96       	adiw	r28, 0x03	; 3
 410:	90 31       	cpi	r25, 0x10	; 16
 412:	a9 f0       	breq	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		if(k % 2) {
 414:	90 fd       	sbrc	r25, 0
 416:	eb cf       	rjmp	.-42     	; 0x3ee <main+0x3e>

			strip3[k].r = 0;
			strip3[k].g = 0;
			strip3[k].b = 20;
		} else {
			strip1[k].r = 15;
 418:	81 83       	std	Z+1, r24	; 0x01
			strip1[k].g = 15;
 41a:	80 83       	st	Z, r24
			strip1[k].b = 15;
 41c:	82 83       	std	Z+2, r24	; 0x02

			strip2[k].r = 15;
 41e:	11 96       	adiw	r26, 0x01	; 1
 420:	8c 93       	st	X, r24
 422:	11 97       	sbiw	r26, 0x01	; 1
			strip2[k].g = 15;
 424:	8c 93       	st	X, r24
			strip2[k].b = 15;
 426:	12 96       	adiw	r26, 0x02	; 2
 428:	8c 93       	st	X, r24
 42a:	12 97       	sbiw	r26, 0x02	; 2
						
			strip3[k].r = 15;
 42c:	89 83       	std	Y+1, r24	; 0x01
			strip3[k].g = 15;
 42e:	88 83       	st	Y, r24
			strip3[k].b = 15;
 430:	8a 83       	std	Y+2, r24	; 0x02
	value[1] = 15;
	val_index = 0;

	// init to Bears colors - alternating blue and white
	_delay_ms(500); // wait until neo-pixels power up
	for(uint8_t k = 0; k < NUM_PIXELS; k++) {
 432:	9f 5f       	subi	r25, 0xFF	; 255
 434:	33 96       	adiw	r30, 0x03	; 3
 436:	13 96       	adiw	r26, 0x03	; 3
 438:	23 96       	adiw	r28, 0x03	; 3
 43a:	90 31       	cpi	r25, 0x10	; 16
 43c:	59 f7       	brne	.-42     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			strip3[k].r = 15;
			strip3[k].g = 15;
			strip3[k].b = 15;
		}
	}
	ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
 43e:	42 e0       	ldi	r20, 0x02	; 2
 440:	60 e1       	ldi	r22, 0x10	; 16
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	8d eb       	ldi	r24, 0xBD	; 189
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	4f df       	rcall	.-354    	; 0x2e8 <ws2812_setleds_pin>
	ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
 44a:	48 e0       	ldi	r20, 0x08	; 8
 44c:	60 e1       	ldi	r22, 0x10	; 16
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	8f ee       	ldi	r24, 0xEF	; 239
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	49 df       	rcall	.-366    	; 0x2e8 <ws2812_setleds_pin>
	ws2812_setleds_pin(strip3, NUM_PIXELS, THREE_PIN);
 456:	40 e1       	ldi	r20, 0x10	; 16
 458:	60 e1       	ldi	r22, 0x10	; 16
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	8d e8       	ldi	r24, 0x8D	; 141
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	43 df       	rcall	.-378    	; 0x2e8 <ws2812_setleds_pin>
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	80 e7       	ldi	r24, 0x70	; 112
 466:	92 e0       	ldi	r25, 0x02	; 2
 468:	21 50       	subi	r18, 0x01	; 1
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 472:	00 00       	nop
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	84 e3       	ldi	r24, 0x34	; 52
 478:	9c e0       	ldi	r25, 0x0C	; 12
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
		_delay_ms(100);

	_delay_ms(500);

  usiTwiSlaveInit(TWI_slaveAddress);
 486:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TWI_slaveAddress>
 48a:	e5 dd       	rcall	.-1078   	; 0x56 <usiTwiSlaveInit>

  // __enable_interrupt();
	sei();
 48c:	78 94       	sei
 48e:	8f e1       	ldi	r24, 0x1F	; 31
 490:	e8 2e       	mov	r14, r24
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	f8 2e       	mov	r15, r24
 496:	0d eb       	ldi	r16, 0xBD	; 189
 498:	10 e0       	ldi	r17, 0x00	; 0
 49a:	cd ee       	ldi	r28, 0xED	; 237
 49c:	d0 e0       	ldi	r29, 0x00	; 0

  // This loop runs forever. If the TWI Transceiver is busy the execution will just continue doing other operations.
  for(;;)
  {

    if( usiTwiDataInReceiveBuffer() )
 49e:	19 de       	rcall	.-974    	; 0xd2 <usiTwiDataInReceiveBuffer>
 4a0:	81 11       	cpse	r24, r1
 4a2:	24 c0       	rjmp	.+72     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
				*/
        // usiTwiTransmitByte(temp);
    }

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
 4a4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <val_index>
 4a8:	84 30       	cpi	r24, 0x04	; 4
 4aa:	c8 f3       	brcs	.-14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			switch(value[0]) {
 4ac:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <value>
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	a1 f1       	breq	.+104    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	e1 f0       	breq	.+56     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	89 f7       	brne	.-30     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4bc:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <value+0x1>
 4c0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <value+0x2>
 4c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
 4c8:	ed eb       	ldi	r30, 0xBD	; 189
 4ca:	f0 e0       	ldi	r31, 0x00	; 0

				case 1:
					for(i = 0; i < NUM_PIXELS; i++) {
						strip1[i].r = value[1];
 4cc:	21 83       	std	Z+1, r18	; 0x01
						strip1[i].g = value[2];
 4ce:	90 83       	st	Z, r25
						strip1[i].b = value[3];
 4d0:	82 83       	std	Z+2, r24	; 0x02
 4d2:	33 96       	adiw	r30, 0x03	; 3
		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {

				case 1:
					for(i = 0; i < NUM_PIXELS; i++) {
 4d4:	ce 17       	cp	r28, r30
 4d6:	df 07       	cpc	r29, r31
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
						strip1[i].r = value[1];
						strip1[i].g = value[2];
						strip1[i].b = value[3];
					}
					ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
 4da:	42 e0       	ldi	r20, 0x02	; 2
 4dc:	60 e1       	ldi	r22, 0x10	; 16
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	8d eb       	ldi	r24, 0xBD	; 189
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	01 df       	rcall	.-510    	; 0x2e8 <ws2812_setleds_pin>

  // This loop runs forever. If the TWI Transceiver is busy the execution will just continue doing other operations.
  for(;;)
  {

    if( usiTwiDataInReceiveBuffer() )
 4e6:	f5 dd       	rcall	.-1046   	; 0xd2 <usiTwiDataInReceiveBuffer>
 4e8:	88 23       	and	r24, r24
 4ea:	e1 f2       	breq	.-72     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
    {
        temp = usiTwiReceiveByte();
 4ec:	df dd       	rcall	.-1090   	; 0xac <usiTwiReceiveByte>
 4ee:	da cf       	rjmp	.-76     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4f0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <value+0x1>
 4f4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <value+0x2>
 4f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
        // usiTwiTransmitByte(temp);
    }

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {
 4fc:	ed e8       	ldi	r30, 0x8D	; 141
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
					ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
					break;

				case 3:
					for(i = 0; i < NUM_PIXELS; i++) {
						strip3[i].r = value[1];
 500:	21 83       	std	Z+1, r18	; 0x01
						strip3[i].g = value[2];
 502:	90 83       	st	Z, r25
						strip3[i].b = value[3];
 504:	82 83       	std	Z+2, r24	; 0x02
 506:	33 96       	adiw	r30, 0x03	; 3
					}
					ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
					break;

				case 3:
					for(i = 0; i < NUM_PIXELS; i++) {
 508:	0e 17       	cp	r16, r30
 50a:	1f 07       	cpc	r17, r31
 50c:	c9 f7       	brne	.-14     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
						strip3[i].r = value[1];
						strip3[i].g = value[2];
						strip3[i].b = value[3];
					}
					ws2812_setleds_pin(strip3, NUM_PIXELS, THREE_PIN);
 50e:	40 e1       	ldi	r20, 0x10	; 16
 510:	60 e1       	ldi	r22, 0x10	; 16
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	8d e8       	ldi	r24, 0x8D	; 141
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	e7 de       	rcall	.-562    	; 0x2e8 <ws2812_setleds_pin>
					break;
 51a:	c1 cf       	rjmp	.-126    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 51c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <value+0x1>
 520:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <value+0x2>
 524:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <value+0x3>
        // usiTwiTransmitByte(temp);
    }

		// wait for whole message
		if(!displayed && (val_index >= 4)) {
			switch(value[0]) {
 528:	ef ee       	ldi	r30, 0xEF	; 239
 52a:	f0 e0       	ldi	r31, 0x00	; 0
					ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
					break;

				case 2:
					for(i = 0; i < NUM_PIXELS; i++) {
						strip2[i].r = value[1];
 52c:	21 83       	std	Z+1, r18	; 0x01
						strip2[i].g = value[2];
 52e:	90 83       	st	Z, r25
						strip2[i].b = value[3];
 530:	82 83       	std	Z+2, r24	; 0x02
 532:	33 96       	adiw	r30, 0x03	; 3
					}
					ws2812_setleds_pin(strip1, NUM_PIXELS, ONE_PIN);
					break;

				case 2:
					for(i = 0; i < NUM_PIXELS; i++) {
 534:	ee 16       	cp	r14, r30
 536:	ff 06       	cpc	r15, r31
 538:	c9 f7       	brne	.-14     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
						strip2[i].r = value[1];
						strip2[i].g = value[2];
						strip2[i].b = value[3];
					}
					ws2812_setleds_pin(strip2, NUM_PIXELS, TWO_PIN);
 53a:	48 e0       	ldi	r20, 0x08	; 8
 53c:	60 e1       	ldi	r22, 0x10	; 16
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	8f ee       	ldi	r24, 0xEF	; 239
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	d1 de       	rcall	.-606    	; 0x2e8 <ws2812_setleds_pin>
					break;
 546:	ab cf       	rjmp	.-170    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
